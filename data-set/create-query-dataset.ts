import { CountryCodes } from "./country-codes.json";
import { writeFileSync } from "fs"
import { inspect } from "util"
import { relative } from "path"

const b = (...args: typeof String.raw extends (...args: infer R) => any ? R : never) => Buffer.from(String.raw(...args));
const bc = (...args: Buffer[]) => Buffer.concat(args);

async function createQueryDataset() {
  const codes = CountryCodes.map(countryCode => {
    if (countryCode.Dial) {
      return countryCode.Dial.split(",").map(dial => dial.replace(/[^\d]/g, "")).map(dial => [dial, countryCode["ISO3166-1-Alpha-2"]]);
    }
    return []
  }).flat()

  writeFileSync(`${__dirname}/c-codes.ts`,
    ''
    + `// Generated by ${relative(process.cwd(), __filename)}\n`
    + `// Do not edit this file.\n`
    + `\n`
    + `export type zones = \`\${1|2|3|4|5|6|7|8|9}\`;\n`
    + `export type Dial = zones | \`\${zones}\${number}\`;\n`
    + `export type ISO31661Alpha2 = string;\n`
    + `export type MapCodes = [\n`
    + `  Dial: Dial,\n`
    + `  ISO31661Alpha2: ISO31661Alpha2,\n`
    + `];\n\n`
    + `export const cCodes: MapCodes[] = ${inspect(codes, { depth: null, maxArrayLength: Infinity })};\n\n`
    + `export const selectDialByISO31661Alpha2 = (iso31661Alpha2ToFind: string) => cCodes.find(([iso31661Alpha2]) => iso31661Alpha2 === iso31661Alpha2ToFind)?.[0];\n\n`
    + `export const selectISO31661Alpha2ByDial = (dialToFind: string) => cCodes.find(([_,dial]) => dial === dialToFind)?.[1];\n\n`
    + `export const selectCCodeByPhoneNumber = (phoneNumber: string) => {\n`
    + `  for (const lenDial of [4, 3, 2, 1]) {\n`
    + `    const prefixPhone = phoneNumber.substring(0, lenDial);\n`
    + `    const region = selectISO31661Alpha2ByDial(prefixPhone);\n`
    + `    if (region) return [prefixPhone, region] as const;\n`
    + `  }\n`
    + `  return null;\n`
    + `}\n\n`
  );
}

createQueryDataset()

